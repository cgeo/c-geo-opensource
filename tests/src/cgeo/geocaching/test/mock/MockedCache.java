package cgeo.geocaching.test.mock;

import cgeo.geocaching.ICache;
import cgeo.geocaching.cgBase;
import cgeo.geocaching.geopoint.Geopoint;

import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStream;
import java.io.InputStreamReader;

public abstract class MockedCache implements ICache {

    final protected Geopoint coords;

    protected MockedCache(final Geopoint coords) {
        this.coords = coords;
    }

    /*
     * The data for the caches can be generated by entering the url
     * http://www.geocaching.com/seek/cache_details.aspx?log=y&wp=GCxxxx&numlogs=35&decrypt=y
     * into a browser and saving the file
     */
    public String getData() {
        return readCachePage(getGeocode());
    }

    public static String readCachePage(final String geocode) {
        try {
            final InputStream is = MockedCache.class.getResourceAsStream("/cgeo/geocaching/test/mock/" + geocode + ".html");
            final BufferedReader br = new BufferedReader(new InputStreamReader(is));

            final StringBuffer buffer = new StringBuffer();
            String line = null;

            while ((line = br.readLine()) != null) {
                buffer.append(line).append('\n');
            }

            br.close();
            return cgBase.replaceWhitespace(buffer.toString());
        } catch (IOException e) {
            e.printStackTrace();
        }
        return null;
    }

    @Override
    public String getLatitude() {
        return cgBase.formatLatitude(coords.getLatitude(), true);
    }

    @Override
    public String getLongitude() {
        return cgBase.formatLongitude(coords.getLongitude(), true);
    }

}
